package cre.test.data;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import cre.test.data.match.CRCluster;
import cre.test.data.match.CRMatch2;
import cre.test.data.type.CRType;
import cre.test.data.type.PubType;
import cre.test.ui.StatusBar;

public class CRTable {

	private static CRTable crTab = null;
	
	private HashSet<CRType> crData;
	
	private HashMap<CRType, CRType> crDataMap;
	
	private List<PubType> allPubs;
	
	private Map<Character, HashMap<String, CRType>> crDup; // first character -> (crString -> CR )

	private int[][] chartData;
	
	private boolean duringUpdate;
	private boolean aborted;
	private boolean showNull;
	
	private AtomicInteger countPub;
	
//	private Connection conn;
//	private PreparedStatement insertPub;
//	private int insertPubBatchSize;
	
	public static CRTable get() {
		if (crTab == null) {
			crTab = new CRTable();
		}
		return crTab;
	}
	
	
	private CRTable () { 
		
		/*
		 try {
			Class.forName("org.h2.Driver");
			conn = DriverManager.getConnection("jdbc:h2:~/cre", "sa", "sa"); 
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		*/
		init();
	}
	

	/**
	 * Initialize empty CRTable
	 */
	
	public void init() {
		crData = new HashSet<CRType>();
		crDataMap = new HashMap<CRType, CRType>();
		allPubs = new ArrayList<PubType>();
		crDup = new HashMap<Character,  HashMap<String, CRType>>();
		CRMatch2.get().init();
		duringUpdate = false;
		aborted = false;
		showNull = true;
		chartData = new int[][] {{0},{0},{0}};
		setAborted(false);
		countPub = new AtomicInteger(0);
		CRSearch.get().init();
		
		/*
		try {
			Statement stmt = conn.createStatement();
			
			StringBuffer sql = new StringBuffer();
			sql.append ("DROP TABLE IF EXISTS PUB;");
			sql.append ("CREATE TABLE PUB (");
			sql.append (Arrays.stream(PubColumn.values()).map(col -> { return col.getSQLCreateTable(); } ).collect(Collectors.joining(", ")));
			sql.append (", PRIMARY KEY (pub_" + PubColumn.ID.id + "));");
			stmt.execute(sql.toString());
			
			sql = new StringBuffer();
			sql.append ("INSERT INTO PUB (");
			sql.append (Arrays.stream(PubColumn.values()).map(col -> { return "pub_" + col.id; } ).collect(Collectors.joining(", ")));
			sql.append (") VALUES (");
			sql.append (Arrays.stream(PubColumn.values()).map(col -> { return "?"; } ).collect(Collectors.joining(", ")));
			sql.append (");");
			insertPub = conn.prepareStatement(sql.toString());
			insertPubBatchSize = 0;
			
			stmt.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		*/
         
		
	}
	
	
	public Stream<CRType> getCR() {
		return crData.stream();
	}

	/**
	 * 
	 * @param includePubsWithoutCRs default=false
	 * @return
	 */
	public Stream<PubType> getPub (boolean includePubsWithoutCRs) {
		return includePubsWithoutCRs ? allPubs.stream() : getCR().flatMap(cr -> cr.getPub()).distinct();
	}
	
	public Stream<PubType> getPub() {
		return getPub(false);
	}
	

	public void addCR(CRType cr) {
		
		String crS = cr.getCR();
		char cr1 = crS.charAt(0);
		crDup.putIfAbsent(cr1, new HashMap<String,CRType>());
		crDup.get(cr1).put(crS, cr);
		crData.add(cr);
	}
	
	
	
	/*
	 * We additionally store all pubs in allPubs
	 * This is later only used for export (to Scopus, WoS, CSV_Pub) when the user setting "include pubs without CRs" is set
	 */
	
	public void addPub (PubType pub) {
		pub.setID(countPub.incrementAndGet());
		
		/*
		try {
			for (int i=1; i<=PubColumn.values().length; i++) {
				
				Object value = PubColumn.values()[i-1].prop.apply(pub).getValue();
				if (value == null) {
					switch (PubColumn.values()[i-1].type) {
					case INT: insertPub.setNull(i, Types.INTEGER); break;
					case STRING: insertPub.setNull(i, Types.VARCHAR); break;
					default:	
					}
				} else {
					switch (PubColumn.values()[i-1].type) {
					case INT: insertPub.setInt(i, (int)value); break;
					case STRING: insertPub.setString(i, (String)value); break;
					default:	
					}
				}
				
			}
			insertPub.addBatch();
			insertPubBatchSize++;
			
			if (insertPubBatchSize==10000) {
				insertPub.executeBatch();
				insertPubBatchSize = 0;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		*/
		
		
		allPubs.add(pub);
	}
	
	
	
	public void mergeDuplicateCR() {
		
		/* Total amount of free memory available to the JVM */
		 System.out.println("Free memory before mergeDuplicateCR (bytes): " +  Runtime.getRuntime().freeMemory());
		
		int pubId = 0;
		for (PubType pub:allPubs) {
			pub.setID(pubId++);
		}
		
		Map<CRType, List<CRType>> groupByCR = allPubs.stream().flatMap (pub -> pub.getCR()).collect(Collectors.groupingBy(Function.identity(), Collectors.toList()));
		
		int crId = 0;
		for (Entry<CRType, List<CRType>> group: groupByCR.entrySet()) {

			if (group.getValue().size()>20) System.out.println(group.getValue().size() + ":" + group.getKey().getCR());
			
			CRType mainCR = group.getKey();
			mainCR.setID(crId++);
			mainCR.setCID2(new CRCluster (mainCR));
			
			group.getValue().stream().flatMap (cr -> cr.getPub()).forEach (pub -> {
				pub.removeCR(mainCR, false);	// removes cr that equals mainCR!
				pub.addCR(mainCR, false);
				mainCR.addPub(pub, false);
			});
			
			crData.add(mainCR);
			
		}
		

		
		for (CRType cr: crData) {
			if (cr.getPub().count()>20) System.out.println(cr.getPub().count() + ">" + cr.getCR());
		}
		
		
		/* Total amount of free memory available to the JVM */
		 System.out.println("Free memory after mergeDuplicateCR (bytes): " +  Runtime.getRuntime().freeMemory());

		
	}
	
	
	public static synchronized void addNewPub (PubType pub) {
		
		CRTable crTable = CRTable.get();
		
		crTable.allPubs.add(pub);
		pub.setID(crTable.allPubs.size());
		
		Set<CRType> pubCR = pub.getCR().collect(Collectors.toSet());
		
		for(CRType cr:pubCR) {
			
			CRType crMain = crTable.crDataMap.get(cr);
			if (crMain == null) {
				crTable.crDataMap.put(cr, cr);
				cr.setID(crTable.crDataMap.size());
				cr.setCID2(new CRCluster (cr));
			} else {
				pub.removeCR(cr, false);	
				pub.addCR(crMain, false);
				crMain.addPub(pub, false);	
			}
		}
		
		
		
//		System.out.println(pub.getTI());
	}
	
	public void addPubsStream(Stream<PubType> pubs) {
		/*
		pubs.forEach(pub -> addPub (pub));
		
		pubs.flatMap(pub -> pub.getCR()).distinct().collect(Collectors.toList()).stream().forEach(cr -> { // make a copy to avoid concurrent modification
			
			String crS = cr.getCR();
			char cr1 = crS.charAt(0);
			crDup.putIfAbsent(cr1, new HashMap<String,CRType>());
			CRType crMain = crDup.get(cr1).get(crS); 
			if (crMain == null) {
				// add current CR to list
				crDup.get(cr1).put(crS, cr);
				crData.add(cr);
				cr.setID(crData.size());
				cr.setCID2(new CRCluster (cr));
			} else {
				// merge current CR with main CR
				cr.getPub().collect(Collectors.toList()).stream().forEach(crPub -> {		// make a copy to avoid concurrent modification
					crPub.addCR(crMain, true);
					crPub.removeCR(cr, true);
				});
			}
		});
		*/
	}
	
	public void addPubs(List<PubType> pubs) {
		
		pubs.stream().forEach(pub -> addPub (pub));
		
		pubs.stream().flatMap(pub -> pub.getCR()).distinct().collect(Collectors.toList()).stream().forEach(cr -> { // make a copy to avoid concurrent modification
			
			String crS = cr.getCR();
			char cr1 = crS.charAt(0);
			crDup.putIfAbsent(cr1, new HashMap<String,CRType>());
			CRType crMain = crDup.get(cr1).get(crS); 
			if (crMain == null) {
				// add current CR to list
				crDup.get(cr1).put(crS, cr);
				crData.add(cr);
				cr.setID(crData.size());
				cr.setCID2(new CRCluster (cr));
			} else {
				// merge current CR with main CR
				cr.getPub().collect(Collectors.toList()).stream().forEach(crPub -> {		// make a copy to avoid concurrent modification
					crPub.addCR(crMain, true);
					crPub.removeCR(cr, true);
				});
			}
		});
		
	}	
	
	/**
	 * Merge CRs based on clustering
	 */

	public void merge () {
		
		// get all clusters with size > 1
		Set<CRCluster> clusters = getCR().filter(cr -> cr.getCID_S()>1).map(cr -> cr.getCID2()).distinct().collect(Collectors.toSet());
		StatusBar.get().setValue(String.format("Merging of %d clusters...", clusters.size()));

		// merge clusters
		clusters.forEach(cl -> {
			
			StatusBar.get().incProgressbar();
			
			// get mainCR = CR with highest number of citations
			CRType crMain = cl.getMainCR();
			Set<CRType> crMerge = cl.getCR().collect(Collectors.toSet());
			crMerge.remove(crMain);

			// merge CRs with main CR
			for (CRType cr:crMerge) {
				cr.getPub().collect(Collectors.toList()).stream().forEach(crPub -> {		// make a copy to avoid concurrent modification
					crPub.addCR(crMain, true);
					crPub.removeCR(cr, true);
				});
			}
			
			// remove merged CRs
			this.crData.removeAll(crMerge);
		});
		
		// reset clusters and match result
		getCR().forEach(cr -> cr.setCID2(new CRCluster(cr)));
		CRMatch2.get().init();
		
		StatusBar.get().setValue("Merging done");

	}
	
	
	
	/**
	 * Update computation of percentiles for all CRs
	 * Called after loading, deleting or merging of CRs
	 * @param removed Data has been removed --> adjust clustering data structures; adjust CR lists per publication
	 */
	
	public void updateData () throws OutOfMemoryError {

		
		duringUpdate = true;		// mutex to avoid chart updates during computation
		
		System.out.println("update Data");
		System.out.println(System.currentTimeMillis());
		
		this.chartData = Indicators.update();
		
		duringUpdate = false;
		
	}

	
	public int[][] getChartData () {
		return this.chartData;
	}
	
		


	private void removeCR (Predicate<CRType> cond) {
		crData.removeIf( cr ->  { 
			if (cond.test(cr)) {
				cr.removeAllPubs(true);
				return true;
			} else {
				return false;
			}
		});
		updateData();
	}

	/**
	 * Remove list of CRs
	 * @param toDelete list of CRs to be deleted
	 */
	public void removeCR (List<CRType> toDelete) {
		removeCR(cr -> toDelete.contains(cr));
	}
	

	/**
	 * Remove all but the given list of CRs
	 * @param toRetain list of CRs to be retained
	 */
	public void retainCR (List<CRType> toRetain) {
		removeCR(cr -> !toRetain.contains(cr));
	}
	
	
	/**
	 * Remove all CRs without year (RPY)
	 */
	public void removeCRWithoutYear () {
		removeCR (cr -> cr.getRPY() == null);
	}

	
	/**
	 * Remove all CRS within a given RPY range
	 * @param range
	 */
	public void removeCRByYear (int[] range) {
		removeCR (cr -> ((cr.getRPY()!=null) && (range[0] <= cr.getRPY()) && (cr.getRPY() <= range[1])));
	}

	
	/**
	 * Remove all CRs within a given N_CR range
	 * @param range
	 */
	public void removeCRByN_CR(int[] range) {
		removeCR (cr -> (range[0] <= cr.getN_CR()) && (cr.getN_CR() <= range[1]));
	}
	
	
	/**
	 * Remove all CRs < / <= / = / >= / > PERC_YR
	 * @param comp comparator (as string); TODO: ENUMERATION
	 * @param threshold
	 */
	
	public void removeCRByPERC_YR (String comp, double threshold) {
		switch (comp) {
			case "<" : removeCR (cr -> cr.getPERC_YR() <  threshold); break;
			case "<=": removeCR (cr -> cr.getPERC_YR() <= threshold); break;
			case "=" : removeCR (cr -> cr.getPERC_YR() == threshold); break;
			case ">=": removeCR (cr -> cr.getPERC_YR() >= threshold); break;
			case ">" : removeCR (cr -> cr.getPERC_YR() >  threshold); break;
		}
	}
	
	
	/**
	 * Remove all citing publications, that do *not* reference any of the given CRs 
	 * @param selCR list of CRs
	 */
	public void removePubByCR (List<CRType> selCR) {
		selCR.stream().flatMap (cr -> cr.getPub()).forEach(pub -> pub.setFlag(true));
		removePub (pub -> !pub.isFlag());
		getPub().forEach(pub -> pub.setFlag(false));
		
//		removePub (pub -> !selCR.stream().flatMap (cr -> cr.getPub()).distinct().collect(Collectors.toList()).contains(pub));
	}
	
	
	
	private void removePub (Predicate<PubType> cond) {
		getPub().filter(cond).collect(Collectors.toList()).forEach(pub -> pub.removeAllCRs(true));
		removeCR(cr -> cr.getN_CR()==0);
	}
	
	/**
	 * Remove all citing publications OUTSIDE the given citing year (PY) range
	 * @param range
	 */
	public void removePubByCitingYear (int[] range) {
		removePub (pub -> (pub.getPY()==null) || (range[0] > pub.getPY()) || (pub.getPY() > range[1]));
	}
	
	

	
	
	/**
	 * Filter publications by year range
	 * Filtering = set VI property to 1 or 0
	 * @param from
	 * @param to
	 */
	public void filterByYear (int[] range) {
		if (!duringUpdate) {
			getCR().forEach ( it -> { it.setVI(((it.getRPY()!=null) && (range[0]<=it.getRPY()) && (range[1]>=it.getRPY())) || ((it.getRPY()==null) && (this.showNull))); });
		}
	}
	

	
	public void filterByCluster (List<CRType> sel) {
		Set<CRCluster> clusters = sel.stream().map(cr -> cr.getCID2()).distinct().collect(Collectors.toSet());
		getCR().forEach ( it -> it.setVI( clusters.contains(it.getCID2()) ));
	}
	
	

	public void filterByCR(List<CRType> show) {
		getCR().forEach ( it -> it.setVI(false) );
//		show.stream().forEach ( it -> it.setVI(true) );
	}

	
	
	public void setShowNull (boolean showNull) {
		this.showNull = showNull;
		getCR().forEach ( it -> { if (it.getRPY() == null) it.setVI(showNull);  });
	}
	
	public void showAll() {
		this.showNull = true;
		getCR().forEach ( it -> it.setVI(true) );
	}
	
	

	
	public boolean isAborted() {
		return aborted;
	}

	public void setAborted(boolean aborted) {
		this.aborted = aborted;
	}








	
}
